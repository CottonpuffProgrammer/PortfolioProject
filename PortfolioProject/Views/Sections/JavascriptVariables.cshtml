@model PortfolioProject.Models.SectionsBookmarksViewModel

@{
    ViewData["Title"] = "Javascript Variables";
}

<div class="container">
    <header class="header">
        <h1>Javascript Variables</h1>
    </header>
</div>

<div class="container">
    <!-- The left sidebar -->
    <div class="sidebar left">
        <h2>Javascript Sections</h2>
        <ul>
            @{
                // If there are no sections
                if (@Model?.Sections == null)
                {
                    <li>
                        No sections to display!
                    </li>
                }
                else
                {
                    // For every section that needs to be displayed
                    foreach (Section s in @Model?.Sections)
                    {
                        // Creates a clickable that takes you to the specified section
                        <li>
                            <a class="nav-link" asp-area="" asp-controller="Sections" asp-action="@s.SectionName">@s.SectionDisplay</a>
                        </li>
                    }
                }
            }
        </ul>
    </div>

    <!-- Section for most webpage content -->
    <div class="content">
        <h2>What are Javascript Variables?</h2>

        <p>
            In JavaScript, a variable is a container that holds a value, such as a number, string, object, or function.
            Variables are essential for storing data that can be used and manipulated throughout your program.

            JavaScript variables can hold a variety of values and are fundamental to how the language operates.
        </p>

        <p>Important aspects of Variables to know include:</p>

        <ol>
            <li>
                Declaring Variables:
                JavaScript provides three main ways to declare variables:
                <ul>
                    <li>
                        var: This is the older way of declaring variables.
                        It is function-scoped, which means the variable is accessible anywhere within the function it is declared in, and it is not block-scoped.
                        The use of var is generally discouraged in modern JavaScript.
                    </li>
                    <li>
                        let: This is the preferred modern way to declare variables.
                        It is block-scoped, meaning the variable is accessible only within the block (e.g., inside a loop or an if statement) where it is declared.
                        let allows reassignment.
                    </li>
                    <li>
                        const: This is used to declare variables that should not be reassigned after their initial value is set.
                        It is also block-scoped. const is useful for declaring constants or values that should remain unchanged throughout the program.
                    </li>
                </ul>
            </li>
            <li>
                Variable Scope:
                <ul>
                    <li>
                        Global Scope: A variable declared outside of any function or block is accessible everywhere in your JavaScript code.
                    </li>
                    <li>
                        Function Scope: A variable declared inside a function using var is function-scoped, meaning it’s only accessible within that function.
                    </li>
                    <li>
                        Block Scope: Variables declared with let and const are block-scoped, meaning they are only accessible within the block where they are declared
                        (such as inside a loop or an if statement).
                    </li>
                </ul>
            </li>
            <li>
                Data Types:
                <ul>
                    <li>
                        String: A sequence of characters enclosed in single or double quotes.
                    </li>
                    <li>
                        Number: Represents both integers and floating-point numbers.
                    </li>
                    <li>
                        Boolean: Represents either true or false.
                    </li>
                    <li>
                        Undefined: A variable that is declared but not assigned a value has the value undefined.
                    </li>
                    <li>
                        Null: A variable that explicitly has no value is assigned null.
                    </li>
                </ul>
            </li>
        </ol>
    </div>

    <!-- The right sidebar -->
    <div class="sidebar right">
        <h2>Bookmarks Sidebar</h2>
        <ul>
            @{
                // If there are no bookmarks
                if (@Model?.Bookmarks == null)
                {
                    <li>
                        No bookmarks to display!
                    </li>
                }
                else
                {
                    // For every bookmark that needs to be displayed
                    foreach (Bookmark b in @Model?.Bookmarks)
                    {
                        // Creates a clickable that takes you to the specified bookmark
                        <li>
                            <a class="nav-link" asp-area="" asp-controller="Sections" asp-action="@b.BookmarkName">@b.BookmarkDisplay</a>
                        </li>
                    }
                }
            }
        </ul>
    </div>
</div>