@model PortfolioProject.Models.SectionsBookmarksViewModel

@{
    ViewData["Title"] = "Javascript Let";
}

<div class="container">
    <header class="header">
        <h1>Javascript Let</h1>
    </header>
</div>

<div class="container">
    <!-- The left sidebar -->
    <div class="sidebar left">
        <h2>Javascript Sections</h2>
        <ul>
            @{
                // If there are no sections
                if (@Model?.Sections == null)
                {
                    <li>
                        No sections to display!
                    </li>
                }
                else
                {
                    // For every section that needs to be displayed
                    foreach (Section s in @Model?.Sections)
                    {
                        // Creates a clickable that takes you to the specified section
                        <li>
                            <a class="nav-link" asp-area="" asp-controller="Sections" asp-action="@s.SectionName">@s.SectionDisplay</a>
                        </li>
                    }
                }
            }
        </ul>
    </div>

    <!-- Section for most webpage content -->
    <div class="content">
        <h2>What is "Let" in Javascript?</h2>

        <p>
            The let keyword in JavaScript is used to declare block-scoped variables,
            meaning the variable is only accessible within the block, statement, or expression where it is defined.
            Let is a modern way to declare variables in JavaScript, with better scoping rules compared to the older var keyword.
        </p>

        <p>Key Features of Let:</p>

        <ol>
            <li>
                Block Scope: Unlike var, which is function-scoped, a variable declared with let is block-scoped,
                meaning it is only available within the block (delimited by curly braces {}) where it is declared.
            </li>
            <li>
                Reassignable: Variables declared with let can be reassigned new values.
            </li>
            <li>
                No Redeclaration in the Same Scope: You cannot declare the same variable more than once within the same scope using let.
                This helps avoid accidental redeclaration errors.
            </li>
            <li>
                Hoisting Behavior: Variables declared with let are hoisted to the top of their scope, but unlike var, they are not initialized.
                If you try to access a let variable before its declaration, it will result in a ReferenceError due to the "temporal dead zone."
            </li>
            <li>
                Reassigning after Declaration: Unlike const, which requires the variable to be assigned only once, let allows for reassignment after the initial declaration.
            </li>
        </ol>
    </div>

    <!-- The right sidebar -->
    <div class="sidebar right">
        <h2>Bookmarks Sidebar</h2>
        <ul>
            @{
                // If there are no bookmarks
                if (@Model?.Bookmarks == null)
                {
                    <li>
                        No bookmarks to display!
                    </li>
                }
                else
                {
                    // For every bookmark that needs to be displayed
                    foreach (Bookmark b in @Model?.Bookmarks)
                    {
                        // Creates a clickable that takes you to the specified bookmark
                        <li>
                            <a class="nav-link" asp-area="" asp-controller="Sections" asp-action="@b.BookmarkName">@b.BookmarkDisplay</a>
                        </li>
                    }
                }
            }
        </ul>
    </div>
</div>