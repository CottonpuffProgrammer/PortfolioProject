@model PortfolioProject.Models.SectionsBookmarksViewModel

@{
    ViewData["Title"] = "Javascript Introduction";
}

<div class="container">
    <header class="header">
        <h1>Javascript Introduction</h1>
    </header>
</div>

<div class="container">
    <!-- The left sidebar -->
    <div class="sidebar left">
        <h2>Javascript Sections</h2>
        <ul>
            @{
                // If there are no sections
                if (@Model?.Sections == null)
                {
                    <li>
                        No sections to display!
                    </li>
                }
                else
                {
                    // For every section that needs to be displayed
                    foreach (Section s in @Model?.Sections)
                    {
                        // Creates a clickable that takes you to the specified section
                        <li>
                            <a class="nav-link" asp-area="" asp-controller="Sections" asp-action="@s.SectionName">@s.SectionDisplay</a>
                        </li>
                    }
                }
            }
        </ul>
    </div>

    <!-- Section for most webpage content -->
    <div class="content">
        <h2>What is Javascript?</h2>

        <p>
            JavaScript is a high-level, dynamic, interpreted programming language that is primarily used for creating interactive effects within web browsers.
            It's one of the core technologies of web development, alongside HTML and CSS, and is commonly used to build websites that are dynamic, interactive,
            and responsive to user actions.
        </p>

        <p>Key Features of Javascript:</p>

        <ul>
            <li>
                Client-Side Scripting: JavaScript is most commonly used as a client-side scripting language.
                This means it runs on the user's web browser rather than on a web server.
                It enables the web page to interact with the user, update dynamically without needing to reload the page,
                and respond to events like clicks, form submissions, or keyboard inputs.
            </li>
            <li>
                Interactivity: JavaScript enables interaction between the user and the webpage, such as:

                <ul>
                    <li>
                        Form validation: Checking if a form is filled out correctly before submission.
                    </li>
                    <li>
                        Animations and effects: Making elements move, fade, or change over time.
                    </li>
                    <li>
                        Handling user events: Responding to clicks, hover effects, and other actions.
                    </li>
                </ul>
            </li>
            <li>
                Versatility: JavaScript is not limited to the browser.
                With platforms like Node.js, JavaScript can also be run on a server, enabling the development of full-stack applications.
            </li>
            <li>
                Event-Driven: JavaScript is an event-driven language, meaning that most actions in a web page,
                like clicks, mouse movements, key presses, or even data loading, are treated as events that can trigger JavaScript functions (event handlers).
            </li>
            <li>
                Dynamic Typing: JavaScript does not require you to declare the type of a variable explicitly.
                It is dynamically typed, meaning the type of a variable is determined at runtime, and can change during the execution of the program.
            </li>
            <li>
                Asynchronous: JavaScript can perform asynchronous operations, meaning it can execute code without waiting for other tasks to complete.
                This is especially useful for tasks like fetching data from a server or waiting for user input without freezing the page.
            </li>
            <li>
                Object-Oriented: JavaScript supports object-oriented programming (OOP) principles, such as creating objects, classes, and using inheritance.
                However, it also supports functional programming and procedural programming styles.
            </li>
        </ul>
    </div>

    <!-- The right sidebar -->
    <div class="sidebar right">
        <h2>Bookmarks Sidebar</h2>
        <ul>
            @{
                // If there are no bookmarks
                if (@Model?.Bookmarks == null)
                {
                    <li>
                        No bookmarks to display!
                    </li>
                }
                else
                {
                    // For every bookmark that needs to be displayed
                    foreach (Bookmark b in @Model?.Bookmarks)
                    {
                        // Creates a clickable that takes you to the specified bookmark
                        <li>
                            <a class="nav-link" asp-area="" asp-controller="Sections" asp-action="@b.BookmarkName">@b.BookmarkDisplay</a>
                        </li>
                    }
                }
            }
        </ul>
    </div>
</div>