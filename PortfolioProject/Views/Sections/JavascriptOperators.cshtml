@model PortfolioProject.Models.SectionsBookmarksViewModel

@{
    ViewData["Title"] = "Javascript Operators";
}

<div class="container">
    <header class="header">
        <h1>Javascript Operators</h1>
    </header>
</div>

<div class="container">
    <!-- The left sidebar -->
    <div class="sidebar left">
        <h2>Javascript Sections</h2>
        <ul>
            @{
                // If there are no sections
                if (@Model?.Sections == null)
                {
                    <li>
                        No sections to display!
                    </li>
                }
                else
                {
                    // For every section that needs to be displayed
                    foreach (Section s in @Model?.Sections)
                    {
                        // Creates a clickable that takes you to the specified section
                        <li>
                            <a class="nav-link" asp-area="" asp-controller="Sections" asp-action="@s.SectionName">@s.SectionDisplay</a>
                        </li>
                    }
                }
            }
        </ul>
    </div>

    <!-- Section for most webpage content -->
    <div class="content">
        <h2>What are Javascript Operators?</h2>

        <p>
            JavaScript operators are symbols used to perform operations on variables and values.
            They allow you to manipulate data, perform calculations, or compare values.
            There are various types of operators in JavaScript, and each one serves a different purpose.
        </p>

        <p>Examples of Operators in Javascript include:</p>

        <ol>
            <li>
                Arithmetic operators are used to perform mathematical calculations, such as addition, subtraction, multiplication, etc.
                <ul>
                    <li>
                        + (Addition): Adds two values.
                    </li>
                    <li>
                        - (Subtraction): Subtracts one value from another.
                    </li>
                    <li>
                        * (Multiplication): Multiplies two values.
                    </li>
                    <li>
                        / (Division): Divides one value by another.
                    </li>
                    <li>
                        % (Modulus): Returns the remainder of a division operation.
                    </li>
                    <li>
                        ++ (Increment): Increases the value of a variable by 1.
                    </li>
                    <li>
                        -- (Decrement): Decreases the value of a variable by 1.
                    </li>
                </ul>
            </li>
            <li>
                Assignment operators are used to assign values to variables.
                The most common one is the simple =, but there are shorthand versions for performing calculations and assignments simultaneously.
                <ul>
                    <li>
                        = (Assignment): Assigns a value to a variable.
                    </li>
                    <li>
                        += (Add and assign): Adds a value to a variable and assigns the result back to the variable.
                    </li>
                    <li>
                        -= (Subtract and assign): Subtracts a value from a variable and assigns the result back to the variable.
                    </li>
                </ul>
            </li>
            <li>
                Comparison operators are used to compare two values. They return a boolean value (true or false) depending on the result of the comparison.
                <ul>
                    <li>
                        == (Equal to): Checks if two values are equal, without considering data type.
                    </li>
                    <li>
                        === (Strict equal to): Checks if two values are equal and of the same data type.
                    </li>
                    <li>
                        != (Not equal to): Checks if two values are not equal, without considering data type.
                    </li>
                    <li>
                        !== (Strict not equal to): Checks if two values are not equal or not of the same data type.
                    </li>
                </ul>
            </li>
        </ol>

        <p>These are just some examples, but there are plenty more operators to use!</p>
    </div>

    <!-- The right sidebar -->
    <div class="sidebar right">
        <h2>Bookmarks Sidebar</h2>
        <ul>
            @{
                // If there are no bookmarks
                if (@Model?.Bookmarks == null)
                {
                    <li>
                        No bookmarks to display!
                    </li>
                }
                else
                {
                    // For every bookmark that needs to be displayed
                    foreach (Bookmark b in @Model?.Bookmarks)
                    {
                        // Creates a clickable that takes you to the specified bookmark
                        <li>
                            <a class="nav-link" asp-area="" asp-controller="Sections" asp-action="@b.BookmarkName">@b.BookmarkDisplay</a>
                        </li>
                    }
                }
            }
        </ul>
    </div>
</div>